#!/usr/bin/env ruby

# 
# 1. read directory with jpgs
# 2. extract datetime from first and last
# 3. load the weather data for this timeframe
#
require 'csv'
require 'fileutils'
require 'date'
require 'awesome_print'
require 'optparse'
require 'optparse/time'

class Weather
  CSV_DATA = '/var/lib/weather/uwaterloo/hobo_15minutedate_2018.csv'
  
  # data points are pegged to 0/15/30/45 minutes
  def normalize_instant(datum)
    minute = (datum.minute / 15) * 15
    # puts DateTime.new(datum.year, datum.month, datum.day, datum.hour, minute, 0)
    DateTime.new(datum.year, datum.month, datum.day, datum.hour, minute, 0)
  end

  def initialize(from_timestamp, to_timestamp)
    @weather = {}

    from_timestamp = (normalize_instant(from_timestamp))
    to_timestamp = (normalize_instant(to_timestamp))
    # puts "reading data from #{from_timestamp} to #{to_timestamp}"
    CSV.foreach(CSV_DATA, { converters: :all, headers: true }) do |row|
      inst = DateTime.new(row['year'], row['month'], row['day'], row['hour'], row['minute'], 0)
      if inst >= from_timestamp && inst <= to_timestamp
        @weather[inst] = {temperature: row['Temperature'],
                          wind: row['Wind Speed - Average 2.0'],
                          precipitation: row['Precipitation - Tipping Bucket']}
      end
    end
  end

  def messwert(inst, messreihe)
    begin
      wert = @weather[normalize_instant(inst)][messreihe]
      if wert.nil?
        wert = -9999.99
      end
    rescue StandardError => e
      puts e
      puts "inst=#{inst}, messreihe=#{messreihe}"
      wert = -9999.99
    end
    wert
  end

  def temperature(inst)
    messwert(inst, :temperature)
  end

  def wind(inst)
    messwert(inst, :wind)
  end

  def precipitation(inst)
    messwert(inst, :precipitation)
  end
end

def exif_time(jpg)
  s = `identify -format "%[EXIF:DateTimeOriginal]" #{jpg}`
  DateTime.strptime(s, '%Y:%m:%d %H:%M:%S')
end

options = {target_dir: '.',
           source_dir: '.',
           interval: 0,
           start_time: '000000',
           end_time: '235959'
}

$verbose = 1

OptionParser.new do |opts|
  opts.banner = "Usage: process-tl-dir [options]"
  opts.on('-i', '--interval seconds', 'Interval in seconds, default: 0') do |interval|
    options[:interval] = interval
  end

  opts.on('-v', '--verbose [LEVEL]', 'logging on or off') do |verbose|
    $verbose = verbose
  end

  opts.on('-s', '--start [IME]', 'Start time HH:MM') do |start|
    if start =~ /([02][0-9]):([05][0-9])/
      options[:start_time] = "#{$~[1]}#{$~[2]}00"
    else
      STDERR.puts "time format HH:MM"
      exit
    end
  end

  opts.on('-e', '--end [TIME]', 'End time HH:MM') do |ende|
    if ende =~ /([02][0-9]):([05][0-9])/
      options[:end_time] = "#{$~[1]}#{$~[2]}00"
    else
      STDERR.puts "time format HH:MM"
      exit
    end
  end

  opts.on('-h', '--help', 'displays help') do
    puts opts
    exit
  end
end.parse!

ap options if $verbose

source_dir = options[:source_dir]
target_dir = options[:target_dir]
interval = options[:interval]
start_time = options[:start_time]
end_time = options[:end_time]

target_dir = "#{target_dir}/exif-#{Process.pid}"
puts "source dir = #{source_dir}" if $verbose
jpgs = Dir["#{source_dir}/**/tl*.jpg"].sort
puts "found #{jpgs.size} jpgs" if $verbose

tag = Weather.new(exif_time(jpgs[0]), exif_time(jpgs[-1]))

FONT = "Envy-Code-R"

FileUtils.mkdir_p target_dir

puts "found #{jpgs.size}" if $verbose

jpgs.each_with_index do |jpg,index|
  s = `identify -format "%[EXIF:DateTimeOriginal]" #{jpg}`
  timestamp = DateTime.strptime(s, '%Y:%m:%d %H:%M:%S')
  # puts timestamp.strftime("%Y-%m-%d %H:%M")
  temperature = tag.temperature(timestamp)
  wind = tag.wind(timestamp)
  ftime = File.stat(jpg)
  target_jpg = "#{target_dir}/tl#{'%06d' % index}.jpg"
  puts "#{jpg} #{timestamp.strftime("%Y-%m-%d %H:%M")} #{"%.1f" % temperature}°C #{"%.1f" % wind} km/h #{target_jpg}" if $verbose
  `convert #{jpg} -font \"#{FONT}\" -gravity NorthEast -pointsize 24 -fill White -annotate +12+12 \"#{timestamp.strftime("%Y-%m-%d %H:%M")}\" -annotate +12+38 \"temp: #{"%.1f" % temperature}°C\" -annotate +12+64 \"wind: #{"%.1f km/h" % wind}\" #{target_jpg}`
  File.utime(ftime.atime, ftime.mtime, target_jpg)
end

