#!/usr/bin/env perl
# 
# process all subdirectories of the name NNNNNNNN-NNNN (YYYYMMDD-HHMM)
#
# pick up the invidual tl*.jpg files
# from different restarts of the timelapse script due to reboots
#
# use 'convert' to overlay each picture with the ExifDateTime value
#
# store the results in directory $exif
#
# make sure the resulting files are numbered starting with tl000001.jpg without
# a gap to prepare for the later creation of the timelapse video using
# 'avconv' from the libav or ffmpeg project
#

use strict;
use warnings;
use POSIX;
use Data::Dump qw(dump);
use Getopt::Std;
use Cwd qw(cwd getcwd);

my $font;

if ("$^O" eq "MSWin32") {
	$font = "Envy-Code-R";
} else {
	$font = "EnvyCodeR";
}

sub get_dirs {
	my $cwd = ".";
	my @dirs = ();
	opendir(CWD, $cwd) or die $!;
	while(my $dir = readdir(CWD)) {
		next unless $dir =~ /\d{8}\-\d{4}/;
		push(@dirs, $dir);
	}
	closedir(CWD);
	return @dirs;
}

sub max_number($) {
	my ($dir) = @_;
	my $max = 0;
	my $jpg = "";
	my $cwd = cwd;
	opendir(DIR, $dir) or die "$!: $cwd/$dir";
	while (my $file = readdir(DIR)) {
		($jpg) = $file =~ m/(\d+).jpg$/;
		next if !defined($jpg);
		if ($jpg > $max) { $max = $jpg; }
	}
	closedir(DIR);
	return $max +0;
}

sub collect_files {
	my($dir, $beginn, $ende, $interval) = @_;
	my @files = ();
	my $last_time = 0;
	for my $jpg (sort readdir(TL)) {
		next unless $jpg =~ /tl\d+.jpg$/;

		my $mtime = (stat("$dir/$jpg"))[9];
		my $date = POSIX::strftime("%H%M%S", localtime($mtime));

		# print "$date >= $beginn && $date <= $ende?\n";
		next unless ($date >= $beginn && $date <= $ende);
		# print "$dir/$jpg ($date)\n";

		# only if this files has more than <interval> seconds distance to the former
		# printf "$jpg: mtime=%s, last_time=%s, interval=$interval", POSIX::strftime("%H:%M:%S", localtime($mtime)), POSIX::strftime("%H:%M:%S", localtime($last_time));
		if (($mtime - $last_time) > ($interval - 1)) {
			# printf " <--- check\n";
			$last_time = $mtime;
		} else {
			next; # skip this file
		}

		push(@files, $jpg);
	}
	return @files;
}

# accept start and end time in form HHMM
my %opts;
getopts('s:e:i:v:', \%opts);
my $beginn = ($opts{'s'} || "0000") . "00";
my $ende   = ($opts{'e'} || "2359") . "59";
my $verbose = ($opts{'v'} || 0);

# we can read a list of files
my $file_list = ($opts{'f'});

# set mininum interval between pictures to <i> seconds
my $interval = ($opts{'i'} || 0);

my $exif = "exif-$beginn-$ende-i$interval"; # output directory
mkdir $exif or die "$!: $exif";
my @dirs = get_dirs();
my $number = max_number($exif) + 1;

my @files = ();

foreach my $dir (sort(@dirs)) {
	print "process dir=", $dir, "\n" if ($verbose > 0);
	opendir(TL, $dir) or die $!;
	# collect all files
	print "$dir, $beginn, $ende, $interval\n" if ($verbose > 1);
	@files = collect_files($dir, $beginn, $ende, $interval);
	foreach my $jpg (sort(@files)) {
		my $tgt = sprintf("$exif/tl%06d.jpg", $number);
		my $src = "$dir/$jpg";
		print "convert $src to $tgt\n" if ($verbose > 1);
		my $rc = system("convert $src -font \"$font\" -gravity SouthEast -pointsize 24 -fill Magenta -annotate +12+12 \"%[EXIF:DateTimeOriginal]\" $tgt");
		if ($rc == 0) {
			my @atime = (stat("$src"));
			utime $atime[8], $atime[9], "$tgt";
			$number++;
		} else { # error
			print "error converting file $tgt\n";
		}
	}
	closedir(TL);
	print "\n";
}

exit;

foreach my $file (@files) {
	my %file = \$file;
	my $rc = system("convert $file{'src'} -font \"$font\" -gravity SouthEast -pointsize 24 -fill Magenta -annotate +12+12 \"%[EXIF:DateTimeOriginal]\" $file{'tgt'}");
	if ($rc == 0) {
		my @atime = (stat("$file{'src'}"));
		utime $atime[8], $atime[9], "$file{'tgt'}";
		$number++;
	} else { # error
		print "error converting file $file{'tgt'}\n";
	}
}
